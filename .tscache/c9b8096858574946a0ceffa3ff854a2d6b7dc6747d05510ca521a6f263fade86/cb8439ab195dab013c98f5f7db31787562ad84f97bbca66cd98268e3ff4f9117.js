"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const model_1 = require("../model");
const utils_1 = require("../../../utils");
const data_1 = require("../../../data");
function login(data) {
    return new Promise(function (resolve, reject) {
        model_1.Admin.find({ username: data.username }).then(function (result) {
            const admins = utils_1.extractByStatus(result);
            // Unverified Admin
            if (admins.inActive.length > 0) {
                return resolve({ status: 422, message: data_1.response.ACCOUNT_UNVERIFIED });
            }
            // Active Admin
            if (admins.active.length > 0) {
                const admin = admins.active[0];
                admin.verifyPassword(data.password).then(function (status) {
                    // password don't matched
                    if (!status)
                        return resolve({ status: 401, message: data_1.response.ACCOUNT_NOT_FOUND });
                    // admin found
                    return resolve({ status: 200, message: data_1.response.LOGIN_SUCCESS, data: admins.active[0] });
                }).catch(reject);
                return;
            }
            // Blocked Admin
            if (admins.blocked.length > 0) {
                return resolve({ status: 422, message: data_1.response.ACCOUNT_BLOCKED });
            }
            // Archived Admin
            if (admins.archived.length > 0) {
                return resolve({ status: 422, message: data_1.response.ACCOUNT_ARCHIVED });
            }
            // Deleted Admin
            if (admins.deleted.length > 0) {
                return resolve({ status: 422, message: data_1.response.ACCOUNT_DELETED });
            }
            return resolve({ status: 401, message: data_1.response.ACCOUNT_NOT_FOUND });
        }).catch(reject);
    });
}
exports.login = login;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvYXBwaW52ZW50aXZyaC0wNTgvQXNoaXNoLXdvcmsvcmNjL2FwaS9kYi9hZG1pbi9vcGVyYXRpb25zL2xvZ2luLnRzIiwic291cmNlcyI6WyIvaG9tZS9hcHBpbnZlbnRpdnJoLTA1OC9Bc2hpc2gtd29yay9yY2MvYXBpL2RiL2FkbWluL29wZXJhdGlvbnMvbG9naW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxvQ0FBaUM7QUFHakMsMENBQWlEO0FBQ2pELHdDQUF5QztBQUV6QyxlQUFzQixJQUFlO0lBQ2pDLE9BQU8sSUFBSSxPQUFPLENBQUMsVUFBUyxPQUFPLEVBQUUsTUFBTTtRQUN2QyxhQUFLLENBQUMsSUFBSSxDQUFDLEVBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFTLE1BQXVCO1lBQ3ZFLE1BQU0sTUFBTSxHQUFHLHVCQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDdkMsbUJBQW1CO1lBQ25CLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUM1QixPQUFPLE9BQU8sQ0FBQyxFQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLGVBQVEsQ0FBQyxrQkFBa0IsRUFBQyxDQUFDLENBQUM7YUFDdkU7WUFDRCxlQUFlO1lBQ2YsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Z0JBQzFCLE1BQU0sS0FBSyxHQUFrQixNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUM5QyxLQUFLLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxNQUFlO29CQUM5RCx5QkFBeUI7b0JBQ3pCLElBQUksQ0FBQyxNQUFNO3dCQUFFLE9BQU8sT0FBTyxDQUFDLEVBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsZUFBUSxDQUFDLGlCQUFpQixFQUFDLENBQUMsQ0FBQztvQkFDaEYsY0FBYztvQkFDZCxPQUFPLE9BQU8sQ0FBQyxFQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLGVBQVEsQ0FBQyxhQUFhLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDO2dCQUUzRixDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ2pCLE9BQU87YUFDVjtZQUNELGdCQUFnQjtZQUNoQixJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDM0IsT0FBTyxPQUFPLENBQUMsRUFBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxlQUFRLENBQUMsZUFBZSxFQUFDLENBQUMsQ0FBQzthQUNwRTtZQUNELGlCQUFpQjtZQUNqQixJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDNUIsT0FBTyxPQUFPLENBQUMsRUFBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxlQUFRLENBQUMsZ0JBQWdCLEVBQUMsQ0FBQyxDQUFDO2FBQ3JFO1lBQ0QsZ0JBQWdCO1lBQ2hCLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUMzQixPQUFPLE9BQU8sQ0FBQyxFQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLGVBQVEsQ0FBQyxlQUFlLEVBQUMsQ0FBQyxDQUFDO2FBQ3BFO1lBRUQsT0FBTyxPQUFPLENBQUMsRUFBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxlQUFRLENBQUMsaUJBQWlCLEVBQUMsQ0FBQyxDQUFDO1FBQ3ZFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNyQixDQUFDLENBQUMsQ0FBQztBQUNQLENBQUM7QUFwQ0Qsc0JBb0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWRtaW4gfSBmcm9tICcuLi9tb2RlbCc7XG5pbXBvcnQgeyBBZG1pbkRvY3VtZW50IH0gZnJvbSAnLi4vZG9jdW1lbnQnO1xuaW1wb3J0IHsgTG9naW5EYXRhLCBPcGVyYXRpb25SZXN1bHQgfSBmcm9tICcuLi8uLi8uLi90eXBpbmdzJztcbmltcG9ydCB7IGV4dHJhY3RCeVN0YXR1cyB9IGZyb20gJy4uLy4uLy4uL3V0aWxzJztcbmltcG9ydCB7IHJlc3BvbnNlIH0gZnJvbSAnLi4vLi4vLi4vZGF0YSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2dpbihkYXRhOiBMb2dpbkRhdGEpOiBQcm9taXNlPE9wZXJhdGlvblJlc3VsdD4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgQWRtaW4uZmluZCh7dXNlcm5hbWU6IGRhdGEudXNlcm5hbWV9KS50aGVuKGZ1bmN0aW9uKHJlc3VsdDogQWRtaW5Eb2N1bWVudFtdKSB7XG4gICAgICAgICAgICBjb25zdCBhZG1pbnMgPSBleHRyYWN0QnlTdGF0dXMocmVzdWx0KTtcbiAgICAgICAgICAgIC8vIFVudmVyaWZpZWQgQWRtaW5cbiAgICAgICAgICAgIGlmIChhZG1pbnMuaW5BY3RpdmUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHtzdGF0dXM6IDQyMiwgbWVzc2FnZTogcmVzcG9uc2UuQUNDT1VOVF9VTlZFUklGSUVEfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBBY3RpdmUgQWRtaW5cbiAgICAgICAgICAgIGlmIChhZG1pbnMuYWN0aXZlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhZG1pbjogQWRtaW5Eb2N1bWVudCA9IGFkbWlucy5hY3RpdmVbMF07XG4gICAgICAgICAgICAgICAgYWRtaW4udmVyaWZ5UGFzc3dvcmQoZGF0YS5wYXNzd29yZCkudGhlbihmdW5jdGlvbiAoc3RhdHVzOiBib29sZWFuKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHBhc3N3b3JkIGRvbid0IG1hdGNoZWRcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzdGF0dXMpIHJldHVybiByZXNvbHZlKHtzdGF0dXM6IDQwMSwgbWVzc2FnZTogcmVzcG9uc2UuQUNDT1VOVF9OT1RfRk9VTkR9KTtcbiAgICAgICAgICAgICAgICAgICAgLy8gYWRtaW4gZm91bmRcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoe3N0YXR1czogMjAwLCBtZXNzYWdlOiByZXNwb25zZS5MT0dJTl9TVUNDRVNTLCBkYXRhOiBhZG1pbnMuYWN0aXZlWzBdfSk7XG5cbiAgICAgICAgICAgICAgICB9KS5jYXRjaChyZWplY3QpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEJsb2NrZWQgQWRtaW5cbiAgICAgICAgICAgIGlmIChhZG1pbnMuYmxvY2tlZC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoe3N0YXR1czogNDIyLCBtZXNzYWdlOiByZXNwb25zZS5BQ0NPVU5UX0JMT0NLRUR9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEFyY2hpdmVkIEFkbWluXG4gICAgICAgICAgICBpZiAoYWRtaW5zLmFyY2hpdmVkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh7c3RhdHVzOiA0MjIsIG1lc3NhZ2U6IHJlc3BvbnNlLkFDQ09VTlRfQVJDSElWRUR9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIERlbGV0ZWQgQWRtaW5cbiAgICAgICAgICAgIGlmIChhZG1pbnMuZGVsZXRlZC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoe3N0YXR1czogNDIyLCBtZXNzYWdlOiByZXNwb25zZS5BQ0NPVU5UX0RFTEVURUR9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoe3N0YXR1czogNDAxLCBtZXNzYWdlOiByZXNwb25zZS5BQ0NPVU5UX05PVF9GT1VORH0pO1xuICAgICAgICB9KS5jYXRjaChyZWplY3QpO1xuICAgIH0pO1xufVxuXG4iXX0=