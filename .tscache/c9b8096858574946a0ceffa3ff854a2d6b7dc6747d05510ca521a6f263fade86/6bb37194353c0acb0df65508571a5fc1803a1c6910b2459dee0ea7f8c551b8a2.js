"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const db_1 = require("../../db");
const data_1 = require("../../data");
const joi = require("joi");
const schema = joi.object({
    page: joi.number().greater(0),
    limit: joi.number().greater(0),
    sortKey: joi.string().valid("name", "dob", "updatedOn", "createdOn"),
    sortValue: joi.number().valid(-1, 1).when("sortKey", { is: joi.exist(), then: joi.required() }),
    search: joi.string(),
    statusCode: joi.array().items(joi.number().valid(0, 1, 2, 3, 4))
});
function fetch(req, res, next) {
    const queries = Object.assign({}, req.query, { statusCode: req.query.statusCode.split(',').map((code) => parseInt(code)) });
    joi.validate(queries, schema).then(function (validatedValue) {
        const options = Object.assign({}, validatedValue, { page: validatedValue.page || 1, limit: validatedValue.limit || 10 });
        db_1.user.fetch(options).then(function ({ status, data }) {
            res.status(status).json({ data });
        }).catch(function (error) {
            console.log(error);
            res.status(500).json({ message: data_1.response.INTERNAL_ERROR });
        });
    }).catch(function (error) {
        res.status(400).json({ message: error.details[0].message.split('"').join("") });
    });
}
exports.fetch = fetch;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvYXBwaW52ZW50aXZyaC0wNTgvQXNoaXNoLXdvcmsvcmNjL2FwaS9jb250cm9sbGVycy91c2VyL2ZldGNoLnRzIiwic291cmNlcyI6WyIvaG9tZS9hcHBpbnZlbnRpdnJoLTA1OC9Bc2hpc2gtd29yay9yY2MvYXBpL2NvbnRyb2xsZXJzL3VzZXIvZmV0Y2gudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxpQ0FBZ0M7QUFDaEMscUNBQXNDO0FBQ3RDLDJCQUEyQjtBQUUzQixNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDO0lBQ3RCLElBQUksRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUM3QixLQUFLLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDOUIsT0FBTyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDO0lBQ3BFLFNBQVMsRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsRUFBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLEtBQUssRUFBRSxFQUFDLElBQUksRUFBRSxHQUFHLENBQUMsUUFBUSxFQUFFLEVBQUMsQ0FBQztJQUM1RixNQUFNLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRTtJQUNwQixVQUFVLEVBQUUsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztDQUNuRSxDQUFDLENBQUM7QUFHSCxlQUFzQixHQUFZLEVBQUUsR0FBYSxFQUFFLElBQWtCO0lBQ2pFLE1BQU0sT0FBTyxxQkFBTyxHQUFHLENBQUMsS0FBSyxJQUFFLFVBQVUsRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBWSxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBQyxDQUFDO0lBQ2xILEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFTLGNBQWM7UUFDdEQsTUFBTSxPQUFPLHFCQUNOLGNBQWMsSUFDakIsSUFBSSxFQUFFLGNBQWMsQ0FBQyxJQUFJLElBQUksQ0FBQyxFQUM5QixLQUFLLEVBQUUsY0FBYyxDQUFDLEtBQUssSUFBSSxFQUFFLEdBQ3BDLENBQUM7UUFDRixTQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUMsTUFBTSxFQUFFLElBQUksRUFBQztZQUM3QyxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDdEMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVMsS0FBSztZQUNuQixPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ25CLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUMsT0FBTyxFQUFFLGVBQVEsQ0FBQyxjQUFjLEVBQUMsQ0FBQyxDQUFDO1FBQzdELENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVMsS0FBSztRQUNuQixHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQztJQUNsRixDQUFDLENBQUMsQ0FBQztBQUNQLENBQUM7QUFqQkQsc0JBaUJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVxdWVzdCwgUmVzcG9uc2UsIE5leHRGdW5jdGlvbiB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHsgdXNlciB9IGZyb20gJy4uLy4uL2RiJztcbmltcG9ydCB7IHJlc3BvbnNlIH0gZnJvbSAnLi4vLi4vZGF0YSc7XG5pbXBvcnQgKiBhcyBqb2kgZnJvbSAnam9pJztcblxuY29uc3Qgc2NoZW1hID0gam9pLm9iamVjdCh7XG4gICAgcGFnZTogam9pLm51bWJlcigpLmdyZWF0ZXIoMCksXG4gICAgbGltaXQ6IGpvaS5udW1iZXIoKS5ncmVhdGVyKDApLFxuICAgIHNvcnRLZXk6IGpvaS5zdHJpbmcoKS52YWxpZChcIm5hbWVcIiwgXCJkb2JcIiwgXCJ1cGRhdGVkT25cIiwgXCJjcmVhdGVkT25cIiksXG4gICAgc29ydFZhbHVlOiBqb2kubnVtYmVyKCkudmFsaWQoLTEsIDEpLndoZW4oXCJzb3J0S2V5XCIsIHtpczogam9pLmV4aXN0KCksdGhlbjogam9pLnJlcXVpcmVkKCl9KSxcbiAgICBzZWFyY2g6IGpvaS5zdHJpbmcoKSxcbiAgICBzdGF0dXNDb2RlOiBqb2kuYXJyYXkoKS5pdGVtcyhqb2kubnVtYmVyKCkudmFsaWQoMCwgMSwgMiwgMywgNCkpXG59KTtcblxuXG5leHBvcnQgZnVuY3Rpb24gZmV0Y2gocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlLCBuZXh0OiBOZXh0RnVuY3Rpb24pIHtcbiAgICBjb25zdCBxdWVyaWVzID0gey4uLnJlcS5xdWVyeSwgc3RhdHVzQ29kZTogcmVxLnF1ZXJ5LnN0YXR1c0NvZGUuc3BsaXQoJywnKS5tYXAoKGNvZGU6IHN0cmluZykgPT4gcGFyc2VJbnQoY29kZSkpfTtcbiAgICBqb2kudmFsaWRhdGUocXVlcmllcywgc2NoZW1hKS50aGVuKGZ1bmN0aW9uKHZhbGlkYXRlZFZhbHVlKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAuLi52YWxpZGF0ZWRWYWx1ZSxcbiAgICAgICAgICAgIHBhZ2U6IHZhbGlkYXRlZFZhbHVlLnBhZ2UgfHwgMSxcbiAgICAgICAgICAgIGxpbWl0OiB2YWxpZGF0ZWRWYWx1ZS5saW1pdCB8fCAxMFxuICAgICAgICB9O1xuICAgICAgICB1c2VyLmZldGNoKG9wdGlvbnMpLnRoZW4oZnVuY3Rpb24gKHtzdGF0dXMsIGRhdGF9KSB7XG4gICAgICAgICAgICByZXMuc3RhdHVzKHN0YXR1cykuanNvbih7IGRhdGEgfSk7XG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICAgICAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7bWVzc2FnZTogcmVzcG9uc2UuSU5URVJOQUxfRVJST1J9KTtcbiAgICAgICAgfSk7XG4gICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgcmVzLnN0YXR1cyg0MDApLmpzb24oe21lc3NhZ2U6IGVycm9yLmRldGFpbHNbMF0ubWVzc2FnZS5zcGxpdCgnXCInKS5qb2luKFwiXCIpfSk7XG4gICAgfSk7XG59Il19