"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const joi = require("joi");
const jsonwebtoken_1 = require("jsonwebtoken");
const environments_1 = require("../../environments");
const db_1 = require("../../db");
const data_1 = require("../../data");
const schema = joi.object().keys({
    token: joi.string().required()
});
function validateToken(req, res, next) {
    const headerToken = req.headers['authorization'].split(" ")[1];
    joi.validate({ token: headerToken }, schema).then(({ token }) => {
        const decodedData = jsonwebtoken_1.verify(token, environments_1.config.JWT_SECRET);
        console.log(decodedData.then);
        if ((decodedData.exp - decodedData.iat) > 60 * 60 * 1000) {
            return res.status(200).json({ data: false, message: 'Token is Expired' });
        }
        db_1.admin.checkPresent({ username: decodedData.username, statusCode: 1 }).then((status) => {
            res.status(200).json({ data: status, message: '' });
        }).catch(() => {
            res.status(500).json({ message: data_1.response.INTERNAL_ERROR });
        });
    }).catch(({ name, details, message }) => {
        // Bad request ** token is required **
        if (!message) {
            message = details[0].message;
        }
        res.status(400).json({ message: message.split('"').join('') });
    });
}
exports.validateToken = validateToken;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvYXBwaW52ZW50aXZyaC0wNTgvQXNoaXNoLXdvcmsvcmNjL2FwaS9jb250cm9sbGVycy9hZG1pbi92YWxpZGF0ZS10b2tlbi50cyIsInNvdXJjZXMiOlsiL2hvbWUvYXBwaW52ZW50aXZyaC0wNTgvQXNoaXNoLXdvcmsvcmNjL2FwaS9jb250cm9sbGVycy9hZG1pbi92YWxpZGF0ZS10b2tlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLDJCQUEyQjtBQUMzQiwrQ0FBc0M7QUFDdEMscURBQTRDO0FBQzVDLGlDQUFpQztBQUNqQyxxQ0FBc0M7QUFFdEMsTUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQztJQUM3QixLQUFLLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRTtDQUNqQyxDQUFDLENBQUM7QUFFSCx1QkFBOEIsR0FBWSxFQUFFLEdBQWEsRUFBRSxJQUFrQjtJQUN6RSxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvRCxHQUFHLENBQUMsUUFBUSxDQUFFLEVBQUMsS0FBSyxFQUFFLFdBQVcsRUFBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUMsS0FBSyxFQUFDLEVBQUUsRUFBRTtRQUN6RCxNQUFNLFdBQVcsR0FBUSxxQkFBTSxDQUFDLEtBQUssRUFBRSxxQkFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQ3pELE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzlCLElBQUcsQ0FBQyxXQUFXLENBQUMsR0FBRyxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksRUFBRTtZQUNyRCxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUMsQ0FBQyxDQUFDO1NBQzNFO1FBQ0QsVUFBSyxDQUFDLFlBQVksQ0FBQyxFQUFDLFFBQVEsRUFBRSxXQUFXLENBQUMsUUFBUSxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFO1lBQ2hGLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFDLENBQUMsQ0FBQztRQUN0RCxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFO1lBQ1YsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBQyxPQUFPLEVBQUUsZUFBUSxDQUFDLGNBQWMsRUFBQyxDQUFDLENBQUM7UUFDN0QsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFDLEVBQUUsRUFBRTtRQUNsQyxzQ0FBc0M7UUFDdEMsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNWLE9BQU8sR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO1NBQ2hDO1FBQ0QsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUFDO0lBQ2pFLENBQUMsQ0FBQyxDQUFBO0FBQ04sQ0FBQztBQXBCRCxzQ0FvQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXF1ZXN0LCBSZXNwb25zZSwgTmV4dEZ1bmN0aW9uIH0gZnJvbSBcImV4cHJlc3NcIjtcbmltcG9ydCAqIGFzIGpvaSBmcm9tICdqb2knO1xuaW1wb3J0IHsgdmVyaWZ5IH0gZnJvbSAnanNvbndlYnRva2VuJztcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4uLy4uL2Vudmlyb25tZW50cyc7XG5pbXBvcnQgeyBhZG1pbiB9IGZyb20gJy4uLy4uL2RiJztcbmltcG9ydCB7IHJlc3BvbnNlIH0gZnJvbSBcIi4uLy4uL2RhdGFcIjtcblxuY29uc3Qgc2NoZW1hID0gam9pLm9iamVjdCgpLmtleXMoe1xuICAgIHRva2VuOiBqb2kuc3RyaW5nKCkucmVxdWlyZWQoKVxufSk7XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZVRva2VuKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKSB7XG4gICAgY29uc3QgaGVhZGVyVG9rZW4gPSByZXEuaGVhZGVyc1snYXV0aG9yaXphdGlvbiddLnNwbGl0KFwiIFwiKVsxXTtcbiAgICBqb2kudmFsaWRhdGUoIHt0b2tlbjogaGVhZGVyVG9rZW59LCBzY2hlbWEpLnRoZW4oKHt0b2tlbn0pID0+IHtcbiAgICAgICAgY29uc3QgZGVjb2RlZERhdGE6IGFueSA9IHZlcmlmeSh0b2tlbiwgY29uZmlnLkpXVF9TRUNSRVQpXG4gICAgICAgIGNvbnNvbGUubG9nKGRlY29kZWREYXRhLnRoZW4pO1xuICAgICAgICBpZigoZGVjb2RlZERhdGEuZXhwIC0gZGVjb2RlZERhdGEuaWF0KSA+IDYwICogNjAgKiAxMDAwKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDApLmpzb24oe2RhdGE6IGZhbHNlLCBtZXNzYWdlOiAnVG9rZW4gaXMgRXhwaXJlZCd9KTtcbiAgICAgICAgfVxuICAgICAgICBhZG1pbi5jaGVja1ByZXNlbnQoe3VzZXJuYW1lOiBkZWNvZGVkRGF0YS51c2VybmFtZSwgc3RhdHVzQ29kZTogMX0pLnRoZW4oKHN0YXR1cykgPT4ge1xuICAgICAgICAgICAgcmVzLnN0YXR1cygyMDApLmpzb24oe2RhdGE6IHN0YXR1cywgbWVzc2FnZTogJyd9KTtcbiAgICAgICAgfSkuY2F0Y2goKCkgPT4ge1xuICAgICAgICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oe21lc3NhZ2U6IHJlc3BvbnNlLklOVEVSTkFMX0VSUk9SfSk7XG4gICAgICAgIH0pO1xuICAgIH0pLmNhdGNoKCh7bmFtZSwgZGV0YWlscywgbWVzc2FnZX0pID0+IHtcbiAgICAgICAgLy8gQmFkIHJlcXVlc3QgKiogdG9rZW4gaXMgcmVxdWlyZWQgKipcbiAgICAgICAgaWYgKCFtZXNzYWdlKSB7XG4gICAgICAgICAgICBtZXNzYWdlID0gZGV0YWlsc1swXS5tZXNzYWdlO1xuICAgICAgICB9XG4gICAgICAgIHJlcy5zdGF0dXMoNDAwKS5qc29uKHttZXNzYWdlOiBtZXNzYWdlLnNwbGl0KCdcIicpLmpvaW4oJycpfSk7XG4gICAgfSlcbn0iXX0=