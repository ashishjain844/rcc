"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const model_1 = require("../model");
const utils_1 = require("../../../utils");
const data_1 = require("../../../data");
function login(data) {
    return new Promise(function (resolve, reject) {
        model_1.User.find({ username: data.username }).then(function (result) {
            const users = utils_1.extractByStatus(result);
            // Unverified User
            if (users.inActive.length > 0) {
                return resolve({ status: 422, message: data_1.response.ACCOUNT_UNVERIFIED });
            }
            // Active User
            if (users.active.length > 0) {
                const user = users.active[0];
                user.verifyPassword(data.password).then(function (status) {
                    // password don't matched
                    if (!status)
                        return resolve({ status: 401, message: data_1.response.ACCOUNT_NOT_FOUND });
                    // User found
                    return resolve({ status: 200, message: data_1.response.LOGIN_SUCCESS, data: user });
                }).catch(reject);
                return;
            }
            // Blocked User
            if (users.blocked.length > 0) {
                return resolve({ status: 422, message: data_1.response.ACCOUNT_BLOCKED });
            }
            // Archived User
            if (users.archived.length > 0) {
                return resolve({ status: 422, message: data_1.response.ACCOUNT_ARCHIVED });
            }
            // Deleted User
            if (users.deleted.length > 0) {
                return resolve({ status: 422, message: data_1.response.ACCOUNT_DELETED });
            }
            return resolve({ status: 401, message: data_1.response.ACCOUNT_NOT_FOUND });
        }).catch(reject);
    });
}
exports.login = login;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvYXBwaW52ZW50aXZyaC0wNTgvQXNoaXNoLXdvcmsvcmNjL2FwaS9kYi91c2VyL29wZXJhdGlvbnMvbG9naW4udHMiLCJzb3VyY2VzIjpbIi9ob21lL2FwcGludmVudGl2cmgtMDU4L0FzaGlzaC13b3JrL3JjYy9hcGkvZGIvdXNlci9vcGVyYXRpb25zL2xvZ2luLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsb0NBQWdDO0FBR2hDLDBDQUFpRDtBQUNqRCx3Q0FBeUM7QUFFekMsZUFBc0IsSUFBZTtJQUNqQyxPQUFPLElBQUksT0FBTyxDQUFDLFVBQVMsT0FBTyxFQUFFLE1BQU07UUFDdkMsWUFBSSxDQUFDLElBQUksQ0FBQyxFQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBUyxNQUFzQjtZQUNyRSxNQUFNLEtBQUssR0FBRyx1QkFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3RDLGtCQUFrQjtZQUNsQixJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDM0IsT0FBTyxPQUFPLENBQUMsRUFBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxlQUFRLENBQUMsa0JBQWtCLEVBQUMsQ0FBQyxDQUFDO2FBQ3ZFO1lBQ0QsY0FBYztZQUNkLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUN6QixNQUFNLElBQUksR0FBaUIsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDM0MsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsTUFBZTtvQkFDN0QseUJBQXlCO29CQUN6QixJQUFJLENBQUMsTUFBTTt3QkFBRSxPQUFPLE9BQU8sQ0FBQyxFQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLGVBQVEsQ0FBQyxpQkFBaUIsRUFBQyxDQUFDLENBQUM7b0JBQ2hGLGFBQWE7b0JBQ2IsT0FBTyxPQUFPLENBQUMsRUFBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxlQUFRLENBQUMsYUFBYSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDO2dCQUUvRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ2pCLE9BQU87YUFDVjtZQUNELGVBQWU7WUFDZixJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDMUIsT0FBTyxPQUFPLENBQUMsRUFBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxlQUFRLENBQUMsZUFBZSxFQUFDLENBQUMsQ0FBQzthQUNwRTtZQUNELGdCQUFnQjtZQUNoQixJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDM0IsT0FBTyxPQUFPLENBQUMsRUFBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxlQUFRLENBQUMsZ0JBQWdCLEVBQUMsQ0FBQyxDQUFDO2FBQ3JFO1lBQ0QsZUFBZTtZQUNmLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUMxQixPQUFPLE9BQU8sQ0FBQyxFQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLGVBQVEsQ0FBQyxlQUFlLEVBQUMsQ0FBQyxDQUFDO2FBQ3BFO1lBRUQsT0FBTyxPQUFPLENBQUMsRUFBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxlQUFRLENBQUMsaUJBQWlCLEVBQUMsQ0FBQyxDQUFDO1FBQ3ZFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNyQixDQUFDLENBQUMsQ0FBQztBQUNQLENBQUM7QUFwQ0Qsc0JBb0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVXNlciB9IGZyb20gJy4uL21vZGVsJztcbmltcG9ydCB7IFVzZXJEb2N1bWVudCB9IGZyb20gJy4uL2RvY3VtZW50JztcbmltcG9ydCB7IExvZ2luRGF0YSwgT3BlcmF0aW9uUmVzdWx0IH0gZnJvbSAnLi4vLi4vLi4vdHlwaW5ncyc7XG5pbXBvcnQgeyBleHRyYWN0QnlTdGF0dXMgfSBmcm9tICcuLi8uLi8uLi91dGlscyc7XG5pbXBvcnQgeyByZXNwb25zZSB9IGZyb20gJy4uLy4uLy4uL2RhdGEnO1xuXG5leHBvcnQgZnVuY3Rpb24gbG9naW4oZGF0YTogTG9naW5EYXRhKTogUHJvbWlzZTxPcGVyYXRpb25SZXN1bHQ+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIFVzZXIuZmluZCh7dXNlcm5hbWU6IGRhdGEudXNlcm5hbWV9KS50aGVuKGZ1bmN0aW9uKHJlc3VsdDogVXNlckRvY3VtZW50W10pIHtcbiAgICAgICAgICAgIGNvbnN0IHVzZXJzID0gZXh0cmFjdEJ5U3RhdHVzKHJlc3VsdCk7XG4gICAgICAgICAgICAvLyBVbnZlcmlmaWVkIFVzZXJcbiAgICAgICAgICAgIGlmICh1c2Vycy5pbkFjdGl2ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoe3N0YXR1czogNDIyLCBtZXNzYWdlOiByZXNwb25zZS5BQ0NPVU5UX1VOVkVSSUZJRUR9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEFjdGl2ZSBVc2VyXG4gICAgICAgICAgICBpZiAodXNlcnMuYWN0aXZlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCB1c2VyOiBVc2VyRG9jdW1lbnQgPSB1c2Vycy5hY3RpdmVbMF07XG4gICAgICAgICAgICAgICAgdXNlci52ZXJpZnlQYXNzd29yZChkYXRhLnBhc3N3b3JkKS50aGVuKGZ1bmN0aW9uIChzdGF0dXM6IGJvb2xlYW4pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gcGFzc3dvcmQgZG9uJ3QgbWF0Y2hlZFxuICAgICAgICAgICAgICAgICAgICBpZiAoIXN0YXR1cykgcmV0dXJuIHJlc29sdmUoe3N0YXR1czogNDAxLCBtZXNzYWdlOiByZXNwb25zZS5BQ0NPVU5UX05PVF9GT1VORH0pO1xuICAgICAgICAgICAgICAgICAgICAvLyBVc2VyIGZvdW5kXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHtzdGF0dXM6IDIwMCwgbWVzc2FnZTogcmVzcG9uc2UuTE9HSU5fU1VDQ0VTUywgZGF0YTogdXNlcn0pO1xuXG4gICAgICAgICAgICAgICAgfSkuY2F0Y2gocmVqZWN0KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBCbG9ja2VkIFVzZXJcbiAgICAgICAgICAgIGlmICh1c2Vycy5ibG9ja2VkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh7c3RhdHVzOiA0MjIsIG1lc3NhZ2U6IHJlc3BvbnNlLkFDQ09VTlRfQkxPQ0tFRH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQXJjaGl2ZWQgVXNlclxuICAgICAgICAgICAgaWYgKHVzZXJzLmFyY2hpdmVkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh7c3RhdHVzOiA0MjIsIG1lc3NhZ2U6IHJlc3BvbnNlLkFDQ09VTlRfQVJDSElWRUR9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIERlbGV0ZWQgVXNlclxuICAgICAgICAgICAgaWYgKHVzZXJzLmRlbGV0ZWQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHtzdGF0dXM6IDQyMiwgbWVzc2FnZTogcmVzcG9uc2UuQUNDT1VOVF9ERUxFVEVEfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHtzdGF0dXM6IDQwMSwgbWVzc2FnZTogcmVzcG9uc2UuQUNDT1VOVF9OT1RfRk9VTkR9KTtcbiAgICAgICAgfSkuY2F0Y2gocmVqZWN0KTtcbiAgICB9KTtcbn1cblxuIl19