"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const joi = require("joi");
const jsonwebtoken_1 = require("jsonwebtoken");
const environments_1 = require("../../environments");
const db_1 = require("../../db");
const data_1 = require("../../data");
const tokenSchema = joi.object().keys({
    token: joi.string().required(),
    password: joi.string().required()
});
function resetPassword(req, res, next) {
    const headerToken = req.headers['authorization'].split(" ")[1];
    joi.validate(Object.assign({ token: headerToken }, req.body), tokenSchema).then(({ token, password }) => {
        const { username, iat, exp } = jsonwebtoken_1.verify(token, environments_1.config.JWT_SECRET);
        if ((exp - iat) > 60 * 60 * 1000) {
            return res.status(200).json({ data: false, message: 'Token is Expired' });
        }
        db_1.admin.resetPassword(username, password).then(({ status, message }) => {
            res.status(status).json({ message });
        }).catch(() => {
            res.status(500).json({ message: data_1.response.INTERNAL_ERROR });
        });
    }).catch(({ name, details, message }) => {
        // Bad request ** token is required **
        if (!message) {
            message = details[0].message;
        }
        res.status(400).json({ message: message.split('"').join('') });
    });
}
exports.resetPassword = resetPassword;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvYXBwaW52ZW50aXZyaC0wNTgvQXNoaXNoLXdvcmsvcmNjL2FwaS9jb250cm9sbGVycy9hZG1pbi9yZXNldC1wYXNzd29yZC50cyIsInNvdXJjZXMiOlsiL2hvbWUvYXBwaW52ZW50aXZyaC0wNTgvQXNoaXNoLXdvcmsvcmNjL2FwaS9jb250cm9sbGVycy9hZG1pbi9yZXNldC1wYXNzd29yZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLDJCQUEyQjtBQUMzQiwrQ0FBc0M7QUFDdEMscURBQTRDO0FBQzVDLGlDQUFpQztBQUNqQyxxQ0FBc0M7QUFFdEMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQztJQUNsQyxLQUFLLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRTtJQUM5QixRQUFRLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRTtDQUNwQyxDQUFDLENBQUM7QUFFSCx1QkFBOEIsR0FBWSxFQUFFLEdBQWEsRUFBRSxJQUFrQjtJQUN6RSxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvRCxHQUFHLENBQUMsUUFBUSxpQkFBRSxLQUFLLEVBQUUsV0FBVyxJQUFLLEdBQUcsQ0FBQyxJQUFJLEdBQUcsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQyxLQUFLLEVBQUUsUUFBUSxFQUFDLEVBQUUsRUFBRTtRQUNwRixNQUFNLEVBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUMsR0FBUSxxQkFBTSxDQUFDLEtBQUssRUFBRSxxQkFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQ2xFLElBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxJQUFJLEVBQUU7WUFDN0IsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLGtCQUFrQixFQUFDLENBQUMsQ0FBQztTQUMzRTtRQUNELFVBQUssQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUMsTUFBTSxFQUFFLE9BQU8sRUFBQyxFQUFFLEVBQUU7WUFDL0QsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBQyxPQUFPLEVBQUMsQ0FBQyxDQUFDO1FBQ3ZDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUU7WUFDVixHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFDLE9BQU8sRUFBRSxlQUFRLENBQUMsY0FBYyxFQUFDLENBQUMsQ0FBQztRQUM3RCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUMsRUFBRSxFQUFFO1FBQ2xDLHNDQUFzQztRQUN0QyxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ1YsT0FBTyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7U0FDaEM7UUFDRCxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBQyxDQUFDLENBQUM7SUFDakUsQ0FBQyxDQUFDLENBQUE7QUFDTixDQUFDO0FBbkJELHNDQW1CQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlcXVlc3QsIFJlc3BvbnNlLCBOZXh0RnVuY3Rpb24gfSBmcm9tIFwiZXhwcmVzc1wiO1xuaW1wb3J0ICogYXMgam9pIGZyb20gJ2pvaSc7XG5pbXBvcnQgeyB2ZXJpZnkgfSBmcm9tICdqc29ud2VidG9rZW4nO1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi4vLi4vZW52aXJvbm1lbnRzJztcbmltcG9ydCB7IGFkbWluIH0gZnJvbSAnLi4vLi4vZGInO1xuaW1wb3J0IHsgcmVzcG9uc2UgfSBmcm9tIFwiLi4vLi4vZGF0YVwiO1xuXG5jb25zdCB0b2tlblNjaGVtYSA9IGpvaS5vYmplY3QoKS5rZXlzKHtcbiAgICB0b2tlbjogam9pLnN0cmluZygpLnJlcXVpcmVkKCksXG4gICAgcGFzc3dvcmQ6IGpvaS5zdHJpbmcoKS5yZXF1aXJlZCgpXG59KTtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlc2V0UGFzc3dvcmQocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlLCBuZXh0OiBOZXh0RnVuY3Rpb24pIHtcbiAgICBjb25zdCBoZWFkZXJUb2tlbiA9IHJlcS5oZWFkZXJzWydhdXRob3JpemF0aW9uJ10uc3BsaXQoXCIgXCIpWzFdO1xuICAgIGpvaS52YWxpZGF0ZSh7dG9rZW46IGhlYWRlclRva2VuLCAuLi5yZXEuYm9keX0sIHRva2VuU2NoZW1hKS50aGVuKCh7dG9rZW4sIHBhc3N3b3JkfSkgPT4ge1xuICAgICAgICBjb25zdCB7dXNlcm5hbWUsIGlhdCwgZXhwfTogYW55ID0gdmVyaWZ5KHRva2VuLCBjb25maWcuSldUX1NFQ1JFVClcbiAgICAgICAgaWYoKGV4cCAtIGlhdCkgPiA2MCAqIDYwICogMTAwMCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKHtkYXRhOiBmYWxzZSwgbWVzc2FnZTogJ1Rva2VuIGlzIEV4cGlyZWQnfSk7XG4gICAgICAgIH1cbiAgICAgICAgYWRtaW4ucmVzZXRQYXNzd29yZCh1c2VybmFtZSwgcGFzc3dvcmQpLnRoZW4oKHtzdGF0dXMsIG1lc3NhZ2V9KSA9PiB7XG4gICAgICAgICAgICByZXMuc3RhdHVzKHN0YXR1cykuanNvbih7bWVzc2FnZX0pO1xuICAgICAgICB9KS5jYXRjaCgoKSA9PiB7XG4gICAgICAgICAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7bWVzc2FnZTogcmVzcG9uc2UuSU5URVJOQUxfRVJST1J9KTtcbiAgICAgICAgfSk7XG4gICAgfSkuY2F0Y2goKHtuYW1lLCBkZXRhaWxzLCBtZXNzYWdlfSkgPT4ge1xuICAgICAgICAvLyBCYWQgcmVxdWVzdCAqKiB0b2tlbiBpcyByZXF1aXJlZCAqKlxuICAgICAgICBpZiAoIW1lc3NhZ2UpIHtcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBkZXRhaWxzWzBdLm1lc3NhZ2U7XG4gICAgICAgIH1cbiAgICAgICAgcmVzLnN0YXR1cyg0MDApLmpzb24oe21lc3NhZ2U6IG1lc3NhZ2Uuc3BsaXQoJ1wiJykuam9pbignJyl9KTtcbiAgICB9KVxufSJdfQ==